{"ast":null,"code":"import React from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.mjs\";\nimport { notifyManager } from \"../core/index.mjs\";\nimport { useQueryErrorResetBoundary } from \"./QueryErrorResetBoundary.mjs\";\nimport { useQueryClient } from \"./QueryClientProvider.mjs\";\nimport { shouldThrowError } from \"./utils.mjs\";\nimport { useIsRestoring } from \"./isRestoring.mjs\";\nexport function useBaseQuery(options, Observer) {\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions._optimisticResults = isRestoring ? 'isRestoring' : 'optimistic'; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n\n  const [observer] = React.useState(() => new Observer(queryClient, defaultedOptions));\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore(React.useCallback(onStoreChange => isRestoring ? () => undefined : observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n    throw observer.fetchOptimistic(defaultedOptions).then(_ref => {\n      let {\n        data\n      } = _ref;\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(error => {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n\n  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.useErrorBoundary, [result.error, observer.getCurrentQuery()])) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}","map":{"version":3,"names":["React","useSyncExternalStore","notifyManager","useQueryErrorResetBoundary","useQueryClient","shouldThrowError","useIsRestoring","useBaseQuery","options","Observer","queryClient","context","isRestoring","errorResetBoundary","defaultedOptions","defaultQueryOptions","_optimisticResults","onError","batchCalls","onSuccess","onSettled","suspense","staleTime","useErrorBoundary","isReset","retryOnMount","observer","useState","result","getOptimisticResult","useCallback","onStoreChange","undefined","subscribe","getCurrentResult","useEffect","clearReset","setOptions","listeners","isLoading","isFetching","fetchOptimistic","then","data","catch","error","isError","getCurrentQuery","notifyOnChangeProps","trackResult"],"sources":["/home/king-longs/Desktop/final/node_modules/react-query/lib/reactjs/useBaseQuery.mjs"],"sourcesContent":["import React from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.mjs\";\nimport { notifyManager } from \"../core/index.mjs\";\nimport { useQueryErrorResetBoundary } from \"./QueryErrorResetBoundary.mjs\";\nimport { useQueryClient } from \"./QueryClientProvider.mjs\";\nimport { shouldThrowError } from \"./utils.mjs\";\nimport { useIsRestoring } from \"./isRestoring.mjs\";\nexport function useBaseQuery(options, Observer) {\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions._optimisticResults = isRestoring ? 'isRestoring' : 'optimistic'; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n\n  const [observer] = React.useState(() => new Observer(queryClient, defaultedOptions));\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore(React.useCallback(onStoreChange => isRestoring ? () => undefined : observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n    throw observer.fetchOptimistic(defaultedOptions).then(({\n      data\n    }) => {\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(error => {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n\n  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.useErrorBoundary, [result.error, observer.getCurrentQuery()])) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}