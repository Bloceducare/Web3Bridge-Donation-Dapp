{"ast":null,"code":"import { hashQueryKeyByOptions, matchQuery, parseFilterArgs } from \"./utils.mjs\";\nimport { Query } from \"./query.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\"; // CLASS\n\nexport class QueryCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.queries = [];\n    this.queriesMap = {};\n  }\n\n  build(client, options, state) {\n    var _options$queryHash;\n\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta\n      });\n      this.add(query);\n    }\n\n    return query;\n  }\n\n  add(query) {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query;\n      this.queries.push(query);\n      this.notify({\n        type: 'added',\n        query\n      });\n    }\n  }\n\n  remove(query) {\n    const queryInMap = this.queriesMap[query.queryHash];\n\n    if (queryInMap) {\n      query.destroy();\n      this.queries = this.queries.filter(x => x !== query);\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash];\n      }\n\n      this.notify({\n        type: 'removed',\n        query\n      });\n    }\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n\n  get(queryHash) {\n    return this.queriesMap[queryHash];\n  }\n\n  getAll() {\n    return this.queries;\n  }\n\n  find(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.queries.find(query => matchQuery(filters, query));\n  }\n\n  findAll(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    return Object.keys(filters).length > 0 ? this.queries.filter(query => matchQuery(filters, query)) : this.queries;\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  onFocus() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n\n  onOnline() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n\n}","map":{"version":3,"names":["hashQueryKeyByOptions","matchQuery","parseFilterArgs","Query","notifyManager","Subscribable","QueryCache","constructor","config","queries","queriesMap","build","client","options","state","_options$queryHash","queryKey","queryHash","query","get","cache","logger","getLogger","defaultQueryOptions","defaultOptions","getQueryDefaults","meta","add","push","notify","type","remove","queryInMap","destroy","filter","x","clear","batch","forEach","getAll","find","arg1","arg2","filters","exact","findAll","Object","keys","length","event","listeners","listener","onFocus","onOnline"],"sources":["/home/king-longs/Desktop/final/node_modules/react-query/lib/core/queryCache.mjs"],"sourcesContent":["import { hashQueryKeyByOptions, matchQuery, parseFilterArgs } from \"./utils.mjs\";\nimport { Query } from \"./query.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\";\n// CLASS\nexport class QueryCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.queries = [];\n    this.queriesMap = {};\n  }\n\n  build(client, options, state) {\n    var _options$queryHash;\n\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta\n      });\n      this.add(query);\n    }\n\n    return query;\n  }\n\n  add(query) {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query;\n      this.queries.push(query);\n      this.notify({\n        type: 'added',\n        query\n      });\n    }\n  }\n\n  remove(query) {\n    const queryInMap = this.queriesMap[query.queryHash];\n\n    if (queryInMap) {\n      query.destroy();\n      this.queries = this.queries.filter(x => x !== query);\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash];\n      }\n\n      this.notify({\n        type: 'removed',\n        query\n      });\n    }\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n\n  get(queryHash) {\n    return this.queriesMap[queryHash];\n  }\n\n  getAll() {\n    return this.queries;\n  }\n\n  find(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.queries.find(query => matchQuery(filters, query));\n  }\n\n  findAll(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    return Object.keys(filters).length > 0 ? this.queries.filter(query => matchQuery(filters, query)) : this.queries;\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  onFocus() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n\n  onOnline() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}