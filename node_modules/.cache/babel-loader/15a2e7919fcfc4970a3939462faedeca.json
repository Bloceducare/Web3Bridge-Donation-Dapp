{"ast":null,"code":"import React from 'react';\nexport const defaultContext = /*#__PURE__*/React.createContext(undefined);\nconst QueryClientSharingContext = /*#__PURE__*/React.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n\n    return window.ReactQueryClientContext;\n  }\n\n  return defaultContext;\n}\n\nexport const useQueryClient = function () {\n  let {\n    context\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n\n  return queryClient;\n};\nexport const QueryClientProvider = _ref => {\n  let {\n    client,\n    children,\n    context,\n    contextSharing = false\n  } = _ref;\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n  const Context = getQueryClientContext(context, contextSharing);\n  return /*#__PURE__*/React.createElement(QueryClientSharingContext.Provider, {\n    value: !context && contextSharing\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children));\n};","map":{"version":3,"names":["React","defaultContext","createContext","undefined","QueryClientSharingContext","getQueryClientContext","context","contextSharing","window","ReactQueryClientContext","useQueryClient","queryClient","useContext","Error","QueryClientProvider","client","children","useEffect","mount","unmount","Context","createElement","Provider","value"],"sources":["/home/king-longs/Desktop/final/node_modules/react-query/lib/reactjs/QueryClientProvider.mjs"],"sourcesContent":["import React from 'react';\nexport const defaultContext = /*#__PURE__*/React.createContext(undefined);\nconst QueryClientSharingContext = /*#__PURE__*/React.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n\n    return window.ReactQueryClientContext;\n  }\n\n  return defaultContext;\n}\n\nexport const useQueryClient = ({\n  context\n} = {}) => {\n  const queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n\n  return queryClient;\n};\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false\n}) => {\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n  const Context = getQueryClientContext(context, contextSharing);\n  return /*#__PURE__*/React.createElement(QueryClientSharingContext.Provider, {\n    value: !context && contextSharing\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children));\n};"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,cAAc,GAAG,aAAaD,KAAK,CAACE,aAAN,CAAoBC,SAApB,CAApC;AACP,MAAMC,yBAAyB,GAAG,aAAaJ,KAAK,CAACE,aAAN,CAAoB,KAApB,CAA/C,C,CAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,qBAAT,CAA+BC,OAA/B,EAAwCC,cAAxC,EAAwD;EACtD,IAAID,OAAJ,EAAa;IACX,OAAOA,OAAP;EACD;;EAED,IAAIC,cAAc,IAAI,OAAOC,MAAP,KAAkB,WAAxC,EAAqD;IACnD,IAAI,CAACA,MAAM,CAACC,uBAAZ,EAAqC;MACnCD,MAAM,CAACC,uBAAP,GAAiCR,cAAjC;IACD;;IAED,OAAOO,MAAM,CAACC,uBAAd;EACD;;EAED,OAAOR,cAAP;AACD;;AAED,OAAO,MAAMS,cAAc,GAAG,YAEnB;EAAA,IAFoB;IAC7BJ;EAD6B,CAEpB,uEAAP,EAAO;EACT,MAAMK,WAAW,GAAGX,KAAK,CAACY,UAAN,CAAiBP,qBAAqB,CAACC,OAAD,EAAUN,KAAK,CAACY,UAAN,CAAiBR,yBAAjB,CAAV,CAAtC,CAApB;;EAEA,IAAI,CAACO,WAAL,EAAkB;IAChB,MAAM,IAAIE,KAAJ,CAAU,wDAAV,CAAN;EACD;;EAED,OAAOF,WAAP;AACD,CAVM;AAWP,OAAO,MAAMG,mBAAmB,GAAG,QAK7B;EAAA,IAL8B;IAClCC,MADkC;IAElCC,QAFkC;IAGlCV,OAHkC;IAIlCC,cAAc,GAAG;EAJiB,CAK9B;EACJP,KAAK,CAACiB,SAAN,CAAgB,MAAM;IACpBF,MAAM,CAACG,KAAP;IACA,OAAO,MAAM;MACXH,MAAM,CAACI,OAAP;IACD,CAFD;EAGD,CALD,EAKG,CAACJ,MAAD,CALH;EAMA,MAAMK,OAAO,GAAGf,qBAAqB,CAACC,OAAD,EAAUC,cAAV,CAArC;EACA,OAAO,aAAaP,KAAK,CAACqB,aAAN,CAAoBjB,yBAAyB,CAACkB,QAA9C,EAAwD;IAC1EC,KAAK,EAAE,CAACjB,OAAD,IAAYC;EADuD,CAAxD,EAEjB,aAAaP,KAAK,CAACqB,aAAN,CAAoBD,OAAO,CAACE,QAA5B,EAAsC;IACpDC,KAAK,EAAER;EAD6C,CAAtC,EAEbC,QAFa,CAFI,CAApB;AAKD,CAlBM"},"metadata":{},"sourceType":"module"}