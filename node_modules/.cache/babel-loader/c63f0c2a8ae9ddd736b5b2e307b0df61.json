{"ast":null,"code":"import { getDefaultState } from \"./mutation.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\"; // CLASS\n\nexport class MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  setOptions(options) {\n    this.options = this.client.defaultMutationOptions(options);\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation;\n\n      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);\n    }\n  }\n\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n\n  mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = { ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n\n}","map":{"version":3,"names":["getDefaultState","notifyManager","Subscribable","MutationObserver","constructor","client","options","setOptions","bindMethods","updateResult","mutate","bind","reset","defaultMutationOptions","onUnsubscribe","listeners","length","_this$currentMutation","currentMutation","removeObserver","onMutationUpdate","action","notifyOptions","type","onSuccess","onError","notify","getCurrentResult","currentResult","undefined","variables","mutateOptions","getMutationCache","build","addObserver","execute","state","result","isLoading","status","isSuccess","isError","isIdle","batch","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","call","data","context","onSettled","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","error","forEach","listener"],"sources":["/home/king-longs/Desktop/final/node_modules/react-query/lib/core/mutationObserver.mjs"],"sourcesContent":["import { getDefaultState } from \"./mutation.mjs\";\nimport { notifyManager } from \"./notifyManager.mjs\";\nimport { Subscribable } from \"./subscribable.mjs\";\n// CLASS\nexport class MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  setOptions(options) {\n    this.options = this.client.defaultMutationOptions(options);\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation;\n\n      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);\n    }\n  }\n\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n\n  mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = { ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}