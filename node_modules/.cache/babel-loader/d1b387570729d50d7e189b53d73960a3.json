{"ast":null,"code":"import { dehydrate, hydrate } from \"../core/index.mjs\";\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */\n\nexport async function persistQueryClientRestore(_ref) {\n  let {\n    queryClient,\n    persister,\n    maxAge = 1000 * 60 * 60 * 24,\n    buster = '',\n    hydrateOptions\n  } = _ref;\n\n  try {\n    const persistedClient = await persister.restoreClient();\n\n    if (persistedClient) {\n      if (persistedClient.timestamp) {\n        const expired = Date.now() - persistedClient.timestamp > maxAge;\n        const busted = persistedClient.buster !== buster;\n\n        if (expired || busted) {\n          persister.removeClient();\n        } else {\n          hydrate(queryClient, persistedClient.clientState, hydrateOptions);\n        }\n      } else {\n        persister.removeClient();\n      }\n    }\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      queryClient.getLogger().error(err);\n      queryClient.getLogger().warn('Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.');\n    }\n\n    persister.removeClient();\n  }\n}\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */\n\nexport async function persistQueryClientSave(_ref2) {\n  let {\n    queryClient,\n    persister,\n    buster = '',\n    dehydrateOptions\n  } = _ref2;\n  const persistClient = {\n    buster,\n    timestamp: Date.now(),\n    clientState: dehydrate(queryClient, dehydrateOptions)\n  };\n  await persister.persistClient(persistClient);\n}\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */\n\nexport function persistQueryClientSubscribe(props) {\n  const unsubscribeQueryCache = props.queryClient.getQueryCache().subscribe(() => {\n    persistQueryClientSave(props);\n  });\n  const unusbscribeMutationCache = props.queryClient.getMutationCache().subscribe(() => {\n    persistQueryClientSave(props);\n  });\n  return () => {\n    unsubscribeQueryCache();\n    unusbscribeMutationCache();\n  };\n}\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */\n\nexport function persistQueryClient(props) {\n  let hasUnsubscribed = false;\n  let persistQueryClientUnsubscribe;\n\n  const unsubscribe = () => {\n    hasUnsubscribed = true;\n    persistQueryClientUnsubscribe == null ? void 0 : persistQueryClientUnsubscribe();\n  }; // Attempt restore\n\n\n  const restorePromise = persistQueryClientRestore(props).then(() => {\n    if (!hasUnsubscribed) {\n      // Subscribe to changes in the query cache to trigger the save\n      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props);\n    }\n  });\n  return [unsubscribe, restorePromise];\n}","map":{"version":3,"names":["dehydrate","hydrate","persistQueryClientRestore","queryClient","persister","maxAge","buster","hydrateOptions","persistedClient","restoreClient","timestamp","expired","Date","now","busted","removeClient","clientState","err","process","env","NODE_ENV","getLogger","error","warn","persistQueryClientSave","dehydrateOptions","persistClient","persistQueryClientSubscribe","props","unsubscribeQueryCache","getQueryCache","subscribe","unusbscribeMutationCache","getMutationCache","persistQueryClient","hasUnsubscribed","persistQueryClientUnsubscribe","unsubscribe","restorePromise","then"],"sources":["/home/king-longs/Desktop/final/node_modules/react-query/lib/persistQueryClient/persist.mjs"],"sourcesContent":["import { dehydrate, hydrate } from \"../core/index.mjs\";\n\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */\nexport async function persistQueryClientRestore({\n  queryClient,\n  persister,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n  hydrateOptions\n}) {\n  try {\n    const persistedClient = await persister.restoreClient();\n\n    if (persistedClient) {\n      if (persistedClient.timestamp) {\n        const expired = Date.now() - persistedClient.timestamp > maxAge;\n        const busted = persistedClient.buster !== buster;\n\n        if (expired || busted) {\n          persister.removeClient();\n        } else {\n          hydrate(queryClient, persistedClient.clientState, hydrateOptions);\n        }\n      } else {\n        persister.removeClient();\n      }\n    }\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      queryClient.getLogger().error(err);\n      queryClient.getLogger().warn('Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.');\n    }\n\n    persister.removeClient();\n  }\n}\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */\n\nexport async function persistQueryClientSave({\n  queryClient,\n  persister,\n  buster = '',\n  dehydrateOptions\n}) {\n  const persistClient = {\n    buster,\n    timestamp: Date.now(),\n    clientState: dehydrate(queryClient, dehydrateOptions)\n  };\n  await persister.persistClient(persistClient);\n}\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */\n\nexport function persistQueryClientSubscribe(props) {\n  const unsubscribeQueryCache = props.queryClient.getQueryCache().subscribe(() => {\n    persistQueryClientSave(props);\n  });\n  const unusbscribeMutationCache = props.queryClient.getMutationCache().subscribe(() => {\n    persistQueryClientSave(props);\n  });\n  return () => {\n    unsubscribeQueryCache();\n    unusbscribeMutationCache();\n  };\n}\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */\n\nexport function persistQueryClient(props) {\n  let hasUnsubscribed = false;\n  let persistQueryClientUnsubscribe;\n\n  const unsubscribe = () => {\n    hasUnsubscribed = true;\n    persistQueryClientUnsubscribe == null ? void 0 : persistQueryClientUnsubscribe();\n  }; // Attempt restore\n\n\n  const restorePromise = persistQueryClientRestore(props).then(() => {\n    if (!hasUnsubscribed) {\n      // Subscribe to changes in the query cache to trigger the save\n      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props);\n    }\n  });\n  return [unsubscribe, restorePromise];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}