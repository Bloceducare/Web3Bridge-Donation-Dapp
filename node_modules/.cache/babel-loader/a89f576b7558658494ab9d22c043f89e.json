{"ast":null,"code":"import { scheduleMicrotask } from \"./utils.mjs\"; // TYPES\n\nexport function createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nexport const notifyManager = createNotifyManager();","map":{"version":3,"names":["scheduleMicrotask","createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","batch","result","flush","schedule","push","batchCalls","args","originalQueue","length","forEach","setNotifyFunction","fn","setBatchNotifyFunction","notifyManager"],"sources":["/home/king-longs/Desktop/final/node_modules/react-query/lib/core/notifyManager.mjs"],"sourcesContent":["import { scheduleMicrotask } from \"./utils.mjs\"; // TYPES\n\nexport function createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nexport const notifyManager = createNotifyManager();"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,aAAlC,C,CAAiD;;AAEjD,OAAO,SAASC,mBAAT,GAA+B;EACpC,IAAIC,KAAK,GAAG,EAAZ;EACA,IAAIC,YAAY,GAAG,CAAnB;;EAEA,IAAIC,QAAQ,GAAGC,QAAQ,IAAI;IACzBA,QAAQ;EACT,CAFD;;EAIA,IAAIC,aAAa,GAAGD,QAAQ,IAAI;IAC9BA,QAAQ;EACT,CAFD;;EAIA,MAAME,KAAK,GAAGF,QAAQ,IAAI;IACxB,IAAIG,MAAJ;IACAL,YAAY;;IAEZ,IAAI;MACFK,MAAM,GAAGH,QAAQ,EAAjB;IACD,CAFD,SAEU;MACRF,YAAY;;MAEZ,IAAI,CAACA,YAAL,EAAmB;QACjBM,KAAK;MACN;IACF;;IAED,OAAOD,MAAP;EACD,CAfD;;EAiBA,MAAME,QAAQ,GAAGL,QAAQ,IAAI;IAC3B,IAAIF,YAAJ,EAAkB;MAChBD,KAAK,CAACS,IAAN,CAAWN,QAAX;IACD,CAFD,MAEO;MACLL,iBAAiB,CAAC,MAAM;QACtBI,QAAQ,CAACC,QAAD,CAAR;MACD,CAFgB,CAAjB;IAGD;EACF,CARD;EASA;AACF;AACA;;;EAGE,MAAMO,UAAU,GAAGP,QAAQ,IAAI;IAC7B,OAAO,YAAa;MAAA,kCAATQ,IAAS;QAATA,IAAS;MAAA;;MAClBH,QAAQ,CAAC,MAAM;QACbL,QAAQ,CAAC,GAAGQ,IAAJ,CAAR;MACD,CAFO,CAAR;IAGD,CAJD;EAKD,CAND;;EAQA,MAAMJ,KAAK,GAAG,MAAM;IAClB,MAAMK,aAAa,GAAGZ,KAAtB;IACAA,KAAK,GAAG,EAAR;;IAEA,IAAIY,aAAa,CAACC,MAAlB,EAA0B;MACxBf,iBAAiB,CAAC,MAAM;QACtBM,aAAa,CAAC,MAAM;UAClBQ,aAAa,CAACE,OAAd,CAAsBX,QAAQ,IAAI;YAChCD,QAAQ,CAACC,QAAD,CAAR;UACD,CAFD;QAGD,CAJY,CAAb;MAKD,CANgB,CAAjB;IAOD;EACF,CAbD;EAcA;AACF;AACA;AACA;;;EAGE,MAAMY,iBAAiB,GAAGC,EAAE,IAAI;IAC9Bd,QAAQ,GAAGc,EAAX;EACD,CAFD;EAGA;AACF;AACA;AACA;;;EAGE,MAAMC,sBAAsB,GAAGD,EAAE,IAAI;IACnCZ,aAAa,GAAGY,EAAhB;EACD,CAFD;;EAIA,OAAO;IACLX,KADK;IAELK,UAFK;IAGLF,QAHK;IAILO,iBAJK;IAKLE;EALK,CAAP;AAOD,C,CAAC;;AAEF,OAAO,MAAMC,aAAa,GAAGnB,mBAAmB,EAAzC"},"metadata":{},"sourceType":"module"}