{"ast":null,"code":"import React from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.mjs\";\nimport { notifyManager } from \"../core/notifyManager.mjs\";\nimport { QueriesObserver } from \"../core/queriesObserver.mjs\";\nimport { useQueryClient } from \"./QueryClientProvider.mjs\";\nimport { useIsRestoring } from \"./isRestoring.mjs\"; // This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\n\nexport function useQueries(_ref) {\n  let {\n    queries,\n    context\n  } = _ref;\n  const queryClient = useQueryClient({\n    context\n  });\n  const isRestoring = useIsRestoring();\n  const defaultedQueries = React.useMemo(() => queries.map(options => {\n    const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n    defaultedOptions._optimisticResults = isRestoring ? 'isRestoring' : 'optimistic';\n    return defaultedOptions;\n  }), [queries, queryClient, isRestoring]);\n  const [observer] = React.useState(() => new QueriesObserver(queryClient, defaultedQueries));\n  const result = observer.getOptimisticResult(defaultedQueries);\n  useSyncExternalStore(React.useCallback(onStoreChange => isRestoring ? () => undefined : observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries, observer]);\n  return result;\n}","map":{"version":3,"names":["React","useSyncExternalStore","notifyManager","QueriesObserver","useQueryClient","useIsRestoring","useQueries","queries","context","queryClient","isRestoring","defaultedQueries","useMemo","map","options","defaultedOptions","defaultQueryOptions","_optimisticResults","observer","useState","result","getOptimisticResult","useCallback","onStoreChange","undefined","subscribe","batchCalls","getCurrentResult","useEffect","setQueries","listeners"],"sources":["/home/king-longs/Desktop/final/node_modules/react-query/lib/reactjs/useQueries.mjs"],"sourcesContent":["import React from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.mjs\";\nimport { notifyManager } from \"../core/notifyManager.mjs\";\nimport { QueriesObserver } from \"../core/queriesObserver.mjs\";\nimport { useQueryClient } from \"./QueryClientProvider.mjs\";\nimport { useIsRestoring } from \"./isRestoring.mjs\"; // This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\n\nexport function useQueries({\n  queries,\n  context\n}) {\n  const queryClient = useQueryClient({\n    context\n  });\n  const isRestoring = useIsRestoring();\n  const defaultedQueries = React.useMemo(() => queries.map(options => {\n    const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n    defaultedOptions._optimisticResults = isRestoring ? 'isRestoring' : 'optimistic';\n    return defaultedOptions;\n  }), [queries, queryClient, isRestoring]);\n  const [observer] = React.useState(() => new QueriesObserver(queryClient, defaultedQueries));\n  const result = observer.getOptimisticResult(defaultedQueries);\n  useSyncExternalStore(React.useCallback(onStoreChange => isRestoring ? () => undefined : observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries, observer]);\n  return result;\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,4BAArC;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,cAAT,QAA+B,mBAA/B,C,CAAoD;AACpD;;AAEA,OAAO,SAASC,UAAT,OAGJ;EAAA,IAHwB;IACzBC,OADyB;IAEzBC;EAFyB,CAGxB;EACD,MAAMC,WAAW,GAAGL,cAAc,CAAC;IACjCI;EADiC,CAAD,CAAlC;EAGA,MAAME,WAAW,GAAGL,cAAc,EAAlC;EACA,MAAMM,gBAAgB,GAAGX,KAAK,CAACY,OAAN,CAAc,MAAML,OAAO,CAACM,GAAR,CAAYC,OAAO,IAAI;IAClE,MAAMC,gBAAgB,GAAGN,WAAW,CAACO,mBAAZ,CAAgCF,OAAhC,CAAzB,CADkE,CACC;;IAEnEC,gBAAgB,CAACE,kBAAjB,GAAsCP,WAAW,GAAG,aAAH,GAAmB,YAApE;IACA,OAAOK,gBAAP;EACD,CAL4C,CAApB,EAKrB,CAACR,OAAD,EAAUE,WAAV,EAAuBC,WAAvB,CALqB,CAAzB;EAMA,MAAM,CAACQ,QAAD,IAAalB,KAAK,CAACmB,QAAN,CAAe,MAAM,IAAIhB,eAAJ,CAAoBM,WAApB,EAAiCE,gBAAjC,CAArB,CAAnB;EACA,MAAMS,MAAM,GAAGF,QAAQ,CAACG,mBAAT,CAA6BV,gBAA7B,CAAf;EACAV,oBAAoB,CAACD,KAAK,CAACsB,WAAN,CAAkBC,aAAa,IAAIb,WAAW,GAAG,MAAMc,SAAT,GAAqBN,QAAQ,CAACO,SAAT,CAAmBvB,aAAa,CAACwB,UAAd,CAAyBH,aAAzB,CAAnB,CAAnE,EAAgI,CAACL,QAAD,EAAWR,WAAX,CAAhI,CAAD,EAA2J,MAAMQ,QAAQ,CAACS,gBAAT,EAAjK,EAA8L,MAAMT,QAAQ,CAACS,gBAAT,EAApM,CAApB;EACA3B,KAAK,CAAC4B,SAAN,CAAgB,MAAM;IACpB;IACA;IACAV,QAAQ,CAACW,UAAT,CAAoBlB,gBAApB,EAAsC;MACpCmB,SAAS,EAAE;IADyB,CAAtC;EAGD,CAND,EAMG,CAACnB,gBAAD,EAAmBO,QAAnB,CANH;EAOA,OAAOE,MAAP;AACD"},"metadata":{},"sourceType":"module"}