{"ast":null,"code":"// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\n\nexport function dehydrate(client) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const mutations = [];\n  const queries = [];\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations,\n    queries\n  };\n}\nexport function hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n\n    const query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQuery.state);\n  });\n}","map":{"version":3,"names":["dehydrateMutation","mutation","mutationKey","options","state","dehydrateQuery","query","queryKey","queryHash","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","status","dehydrate","client","mutations","queries","dehydrateMutations","shouldDehydrateMutation","getMutationCache","getAll","forEach","push","dehydrateQueries","shouldDehydrateQuery","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","dehydratedMutation","_options$defaultOptio","build","defaultOptions","dehydratedQuery","_options$defaultOptio2","get","dataUpdatedAt","setState"],"sources":["/home/king-longs/Desktop/final/node_modules/react-query/lib/core/hydration.mjs"],"sourcesContent":["// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\n\nexport function dehydrate(client, options = {}) {\n  const mutations = [];\n  const queries = [];\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations,\n    queries\n  };\n}\nexport function hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n\n    const query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQuery.state);\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}